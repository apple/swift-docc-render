#!/usr/bin/env node

/* eslint-disable no-restricted-syntax, import/no-extraneous-dependencies */

const fs = require('fs');
const path = require('path');

const Parser = require('tree-sitter');
const JavaScript = require('tree-sitter-javascript');
const Vue = require('tree-sitter-vue');

async function* find(filepath, predicate = () => true) {
  const files = await fs.promises.readdir(filepath);

  for await (const file of files) {
    const fpath = path.join(filepath, file);
    const fstat = await fs.promises.stat(fpath);

    if (fstat.isDirectory()) {
      yield* find(fpath, predicate);
    } else if (predicate(fpath)) {
      yield fpath;
    }
  }
}

async function* findVueFiles(filepath) {
  const isVueFile = fpath => path.extname(fpath) === '.vue';
  yield* find(filepath, isVueFile);
}

(async () => {
  const vueParser = new Parser();
  vueParser.setLanguage(Vue);

  const jsParser = new Parser();
  jsParser.setLanguage(JavaScript);

  const scriptTextQuery = new Parser.Query(
    Vue,
    '(script_element (raw_text) @txt)',
  );

  const exportNameQuery = new Parser.Query(
    JavaScript,
    '(export_statement (object (pair (property_identifier) @prop (string) @val)))',
  );

  const src = path.join(__dirname, '../src');
  const components = path.join(src, 'components');
  for await (const file of findVueFiles(components)) {
    console.log(file);
    const contents = await fs.promises.readFile(file, { encoding: 'utf8' });
    const vueTree = vueParser.parse(contents);

    const [scriptCapture] = scriptTextQuery.captures(vueTree.rootNode);
    if (scriptCapture) {
      const jsTree = jsParser.parse(scriptCapture.node.text);

      const [propCapture, valCapture] = exportNameQuery.captures(jsTree.rootNode);
      if (propCapture && valCapture && propCapture.node.text === 'name') {
        const componentName = valCapture.node.text;
        console.log(componentName);
      }
    }
  }
})();
