#!/usr/bin/env node

/* eslint-disable no-restricted-syntax, import/no-extraneous-dependencies */

const fs = require('fs');
const path = require('path');

const Parser = require('tree-sitter');
const JavaScript = require('tree-sitter-javascript');
const Vue = require('tree-sitter-vue');

async function* find(dir, predicate = () => true) {
  const files = await fs.promises.readdir(dir);

  for await (const file of files) {
    const fpath = path.join(dir, file);
    const fstat = await fs.promises.stat(fpath);

    if (fstat.isDirectory()) {
      yield* find(fpath, predicate);
    } else if (predicate(fpath)) {
      yield fpath;
    }
  }
}

async function* findVueFiles(dir) {
  const isVueFile = fpath => path.extname(fpath) === '.vue';
  yield* find(dir, isVueFile);
}

(async () => {
  const vueParser = new Parser();
  vueParser.setLanguage(Vue);
  const scriptTextQuery = new Parser.Query(Vue,
    `(script_element
       (raw_text) @txt)`);

  const jsParser = new Parser();
  jsParser.setLanguage(JavaScript);
  const exportNameQuery = new Parser.Query(JavaScript,
    `(export_statement
       (object
         (pair (property_identifier) @key (string) @strval)))`);

  const symbols = [];

  const rootDir = path.join(__dirname, '..');
  const componentsDir = path.join(rootDir, 'src/components');
  for await (const filepath of findVueFiles(componentsDir)) {
    const preciseIdentifier = filepath.replace(componentsDir, '');
    const contents = await fs.promises.readFile(filepath, { encoding: 'utf8' });
    const vueTree = vueParser.parse(contents);

    const [script] = scriptTextQuery.captures(vueTree.rootNode);
    if (script) {
      const jsTree = jsParser.parse(script.node.text);

      const [key, strval] = exportNameQuery.captures(jsTree.rootNode);
      if (key && strval && key.node.text === 'name') {
        const componentName = strval.node.text;
        symbols.push({
          accessLevel: 'public',
          kind: {
            identifier: 'vue.component',
            displayName: 'Component',
          },
          names: {
            title: componentName,
          },
          identifier: {
            interfaceLanguage: 'vue',
            precise: preciseIdentifier,
          },
        });
      }
    }
  }

  const formatVersion = {
    major: 0,
    minor: 1,
    patch: 0,
  };
  const metadata = {
    formatVersion,
    generator: 'Swift-DocC-Render',
  };
  const $module = {
    name: 'Swift-DocC-Render',
    platform: {},
  };
  const relationships = [];
  const symbolGraph = {
    metadata,
    module: $module,
    relationships,
    symbols,
  };
  const symbolGraphJSON = JSON.stringify(symbolGraph);

  console.log(symbolGraphJSON);
})();
